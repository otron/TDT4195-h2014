# Stuff to do:

1. Plot a cube of any color using 12 triangles.

2. In RS1, rotate the cube in y.

3. In RS2, rotate the cube in z at speed v1 and in y at speed v2 where v1 != v2.

4. In RS3, copy RS2 and also rotate in z at v3 != v1.

5. In RS4, translate the cube back and forth through z.

6. In RS5, translate the cube back and forth in x and rotate it in x, y and z.

# Doing stuff
We start out with a triangle.

What happens if I add another glDrawArrays() in RS1?
Nothing, apparently. What's annoying is that they don't really explain how the new pipeline works.

Oh hey, is VBO a Vertex Buffer Object?
Is what I am supposed to do the exact same thing as described here http://www.opengl-tutorial.org/beginners-tutorials/tutorial-4-a-colored-cube/ ?

Right there's some other stuff I need to include in the report as well:
In scene 2, change the values of the projection matrix so you can understand what its components' roles are.
    As the FOV decreases the triangle appears larger and closer, and as it increases the triangle seems to become smaller.
    Up to a certain point, whereupon the face of the triangle covers the entire frame or becomes smaller than a pixel, respectively.

    Changing the display range changes the depth of the projection box/convex shape/whatever.
    Its base is at wherever the camera is, which in this case is at the coordinates defined by the first vec3-argument to the `lookAt-function` used to define the Camera/View matrix.

In scene 3, read online documentation about orthogonal projection and change some values and answer "What does each value represent?"
    glm::ortho eh?
    The first two pairs of arguments define the size of the projection plane: The pairs are points on the x-axis and y-axis respectively.
    The last two arguments are optional (but we need either both or none) and define near and far z-values.
    I'm not sure what that last bit means, exactly.

Okay let's draw a fukken cube!

Well look at that we've drawn a cube.
Admittedly I copied the code from http://www.opengl-tutorial.org/beginners-tutorials/tutorial-4-a-colored-cube/, but whatever.
It's solid red. Hard to tell that it's actually spinnin'. I wonder if there's some easy way I can gradient its surface?
Alternatively I could spend 20 minutes manually coloring the vertices.
I'm going to wait with the coloring.

Let's look at what's happening in RS4 and copy the rotation code from there, eh?
Well I found the line responsible for the rotation but yeah. It's just one line and doesn't make any sense to me right now.

According to http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/ it seems like I need to apply a rotation matrix to the model.
Now since the model is initially static and shared between the scenes I'd have to save it somehow between frames, otherwise it'd get reset to its initial position between each frame and would appear static.
Not a problem, but perhaps that's not the intended solution?

Oh, no, lol.
There's an if-else in Idle() which performs the rotation using euler angles.
I could add clauses for the various scenes there to make it rotate as requested.

Nope, simply adding a clause for g_currentscene == 2 doesn't make the cube in RS2 rotate.

# ANS
Cube should be rotating in y in RS1, but it's too close for the effect to be noticeable.
Well this wasn't so difficult, now that I've figured out how to do it.

Hm, so I've got half the "back and forth" part of the translation working.
How do I get it to reverse its direction after some amount of time?
I could count the distance it travels and swap the sign on the speed when it exceeds some amount.
Or I could check its position in the axis I'm translating it through and reverse the sign if it's past some value.
Can't figure out how to get its position in a given axis though. Counter it is!

Wait no, through trial and error and printing out the entire 4x4 matrix each frame as it is translated through Z I've deduced that the Z-coordinate is in Model[3][3].
